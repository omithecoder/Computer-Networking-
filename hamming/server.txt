#include <stdio.h>
#include <math.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>

int code[32];

int ham_calc(int position, int c_l) {
    int count = 0, i, j;
    i = position - 1;
    while (i < c_l) {
        for (j = i; j < i + position && j < c_l; j++) {
            if (code[j] == 1)
                count++;
        }
        i = i + 2 * position;
    }
    if (count % 2 == 0)
        return 0;
    else
        return 1;
}

int main() {
    int n, i, c_l, p_n = 0;

    int server_socket, client_socket;
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in server_address, client_address;
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(9000);

    int bind_status = bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address));
    if (bind_status < 0)
        printf("\n Problem in binding.....");
    else
        printf("\n Binded...........");

    listen(server_socket, 5);
    int clength = sizeof(client_address);
    client_socket = accept(server_socket, (struct sockaddr *)&client_address, &clength);

    char received_code1[100];
    read(client_socket, received_code1, sizeof(received_code1));

    int received_code[32];
    int n1 = strlen(received_code1);
    for (i = 0; i < n1; i++) {
        if (received_code1[i] == '1') {
            received_code[i] = 1;
        } else {
            received_code[i] = 0;
        }
    }

    printf("\nThe received Code Word is: ");
    for (i = 0; i < n1; i++) {
        printf("%d", received_code[i]);
        code[i] = received_code[i];
    }
    printf("\n");

    n = n1;

    i = 0;
    while (n > (int)pow(2, i) - (i + 1)) {
        p_n++;
        i++;
    }
    c_l = p_n + n;

    int error_pos = 0;
    for (i = 0; i < p_n; i++) {
        int position = (int)pow(2, i);
        int value = ham_calc(position, c_l);
        if (value != 0)
            error_pos += position;
    }

    if (error_pos == 0) {
        printf("The received Code Word is correct.\n");
    } else {
        printf("Error at bit position: %d\n", error_pos - 1);
        printf("Correcting the error...\n");

        if (received_code[error_pos - 1] == 1) {
            received_code[error_pos - 1] = 0;
        } else {
            received_code[error_pos - 1] = 1;
        }

        printf("Corrected Code Word: ");
        for (i = 0; i < c_l; i++) {
            printf("%d", received_code[i]);
        }
        printf("\n");
    }

    close(server_socket);
    close(client_socket);

    return 0;
}
